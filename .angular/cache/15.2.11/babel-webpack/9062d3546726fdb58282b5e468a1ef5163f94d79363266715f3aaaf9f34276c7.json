{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class AuthService {\n  isLoggedIn() {\n    const userData = localStorage.getItem('user');\n    return !!userData;\n  }\n  getUserId() {\n    const userData = localStorage.getItem('user');\n    if (userData) {\n      const user = JSON.parse(userData);\n      return user.idUser || null;\n    }\n    return null;\n  }\n  getUserFunds() {\n    const userData = localStorage.getItem('user');\n    if (userData) {\n      const user = JSON.parse(userData);\n      return user.funds || 0;\n    }\n    return 0;\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";AAKA,OAAM,MAAOA,WAAW;EACtBC,UAAU;IACR,MAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC7C,OAAO,CAAC,CAACF,QAAQ;EACnB;EAEAG,SAAS;IACP,MAAMH,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC7C,IAAIF,QAAQ,EAAE;MACZ,MAAMI,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACN,QAAQ,CAAC;MACjC,OAAOI,IAAI,CAACG,MAAM,IAAI,IAAI;;IAE5B,OAAO,IAAI;EACb;EAEAC,YAAY;IACV,MAAMR,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC7C,IAAIF,QAAQ,EAAE;MACZ,MAAMI,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACN,QAAQ,CAAC;MACjC,OAAOI,IAAI,CAACK,KAAK,IAAI,CAAC;;IAExB,OAAO,CAAC;EACV;EAAC;qBAtBUX,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAY,SAAXZ,WAAW;IAAAa,YAFV;EAAM","names":["AuthService","isLoggedIn","userData","localStorage","getItem","getUserId","user","JSON","parse","idUser","getUserFunds","funds","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\cruza\\Ecommerce Front\\src\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  isLoggedIn(): boolean {\r\n    const userData = localStorage.getItem('user');\r\n    return !!userData;\r\n  }\r\n\r\n  getUserId(): number | null {\r\n    const userData = localStorage.getItem('user');\r\n    if (userData) {\r\n      const user = JSON.parse(userData);\r\n      return user.idUser || null;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  getUserFunds(): number {\r\n    const userData = localStorage.getItem('user');\r\n    if (userData) {\r\n      const user = JSON.parse(userData);\r\n      return user.funds || 0;\r\n    }\r\n    return 0;\r\n  }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}