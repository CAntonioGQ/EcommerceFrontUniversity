{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { User } from 'src/app/model/user';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"src/app/adapters/user.repository.adapter\";\nimport * as i4 from \"@angular/common\";\nfunction RegisterComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 20);\n    i0.ɵɵtext(1, \" \\u00A1Ingresa tu nombre! \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 20);\n    i0.ɵɵtext(1, \" \\u00A1Ingresa un correo electr\\u00F3nico v\\u00E1lido! \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 20);\n    i0.ɵɵtext(1, \" \\u00A1Ingresa una contrase\\u00F1a v\\u00E1lida! \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 20);\n    i0.ɵɵtext(1, \" Las contrase\\u00F1as no coinciden. \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class RegisterComponent {\n  constructor(fb, router, userService) {\n    this.fb = fb;\n    this.router = router;\n    this.userService = userService;\n    this.registerForm = this.fb.group({\n      name: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]],\n      confirmPassword: ['', Validators.required]\n    });\n  }\n  onSubmit() {\n    if (this.registerForm.valid && this.passwordMatch()) {\n      const newUser = new User();\n      newUser.setName = this.registerForm.get('name')?.value;\n      newUser.setEmail = this.registerForm.get('email')?.value;\n      newUser.setPassword = this.registerForm.get('password')?.value;\n      newUser.setStatus = User.ENABLE;\n      this.userService.createUser(newUser).subscribe(createdUser => {\n        console.log('Usuario creado:', createdUser);\n        this.router.navigate(['/']);\n      }, error => {\n        console.error('Error al crear usuario:', error);\n      });\n    } else {\n      console.log('Formulario inválido o contraseñas no coinciden');\n    }\n  }\n  passwordMatch() {\n    const password = this.registerForm.get('password')?.value;\n    const confirmPassword = this.registerForm.get('confirmPassword')?.value;\n    return password === confirmPassword;\n  }\n  goToLogin() {\n    this.router.navigate(['/login']);\n  }\n  static #_ = this.ɵfac = function RegisterComponent_Factory(t) {\n    return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.UserService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RegisterComponent,\n    selectors: [[\"app-register\"]],\n    decls: 35,\n    vars: 5,\n    consts: [[1, \"container\", \"mt-5\"], [1, \"row\", \"justify-content-center\"], [1, \"col-md-6\"], [1, \"card\"], [1, \"card-body\"], [1, \"text-center\", \"mb-4\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"mb-3\"], [\"for\", \"name\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"name\", \"formControlName\", \"name\", \"placeholder\", \"Nombre y apellido\", 1, \"form-control\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"for\", \"email\", 1, \"form-label\"], [\"type\", \"email\", \"id\", \"email\", \"formControlName\", \"email\", \"placeholder\", \"Escribe tu correo electr\\u00F3nico o tu n\\u00FAmero m\\u00F3vil\", 1, \"form-control\"], [\"for\", \"password\", 1, \"form-label\"], [\"type\", \"password\", \"id\", \"password\", \"formControlName\", \"password\", \"placeholder\", \"Debe tener al menos 6 caracteres\", 1, \"form-control\"], [\"for\", \"confirmPassword\", 1, \"form-label\"], [\"type\", \"password\", \"id\", \"confirmPassword\", \"formControlName\", \"confirmPassword\", \"placeholder\", \"Vuelve a escribir tu contrase\\u00F1a\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-warning\", \"w-100\"], [1, \"text-center\", \"mt-3\"], [\"href\", \"/login\", 3, \"click\"], [1, \"text-danger\"]],\n    template: function RegisterComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"h2\", 5);\n        i0.ɵɵtext(6, \"Crear cuenta\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"form\", 6);\n        i0.ɵɵlistener(\"ngSubmit\", function RegisterComponent_Template_form_ngSubmit_7_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(8, \"div\", 7)(9, \"label\", 8);\n        i0.ɵɵtext(10, \"Nombre\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(11, \"input\", 9);\n        i0.ɵɵtemplate(12, RegisterComponent_div_12_Template, 2, 0, \"div\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"div\", 7)(14, \"label\", 11);\n        i0.ɵɵtext(15, \"Correo electr\\u00F3nico\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(16, \"input\", 12);\n        i0.ɵɵtemplate(17, RegisterComponent_div_17_Template, 2, 0, \"div\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"div\", 7)(19, \"label\", 13);\n        i0.ɵɵtext(20, \"Contrase\\u00F1a\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(21, \"input\", 14);\n        i0.ɵɵtemplate(22, RegisterComponent_div_22_Template, 2, 0, \"div\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"div\", 7)(24, \"label\", 15);\n        i0.ɵɵtext(25, \"Vuelve a escribir la contrase\\u00F1a\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(26, \"input\", 16);\n        i0.ɵɵtemplate(27, RegisterComponent_div_27_Template, 2, 0, \"div\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(28, \"button\", 17);\n        i0.ɵɵtext(29, \"Continuar\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(30, \"div\", 18)(31, \"p\");\n        i0.ɵɵtext(32, \"\\u00BFYa tienes una cuenta? \");\n        i0.ɵɵelementStart(33, \"a\", 19);\n        i0.ɵɵlistener(\"click\", function RegisterComponent_Template_a_click_33_listener() {\n          return ctx.goToLogin();\n        });\n        i0.ɵɵtext(34, \"Iniciar sesi\\u00F3n\");\n        i0.ɵɵelementEnd()()()()()()()();\n      }\n      if (rf & 2) {\n        let tmp_1_0;\n        let tmp_2_0;\n        let tmp_3_0;\n        let tmp_4_0;\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"formGroup\", ctx.registerForm);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ((tmp_1_0 = ctx.registerForm.get(\"name\")) == null ? null : tmp_1_0.invalid) && ((tmp_1_0 = ctx.registerForm.get(\"name\")) == null ? null : tmp_1_0.touched));\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ((tmp_2_0 = ctx.registerForm.get(\"email\")) == null ? null : tmp_2_0.invalid) && ((tmp_2_0 = ctx.registerForm.get(\"email\")) == null ? null : tmp_2_0.touched));\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ((tmp_3_0 = ctx.registerForm.get(\"password\")) == null ? null : tmp_3_0.invalid) && ((tmp_3_0 = ctx.registerForm.get(\"password\")) == null ? null : tmp_3_0.touched));\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", !ctx.passwordMatch() && ((tmp_4_0 = ctx.registerForm.get(\"confirmPassword\")) == null ? null : tmp_4_0.touched));\n      }\n    },\n    dependencies: [i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n    encapsulation: 2\n  });\n}","map":{"version":3,"mappings":"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","names":["Validators","User","i0","RegisterComponent","constructor","fb","router","userService","registerForm","group","name","required","email","password","minLength","confirmPassword","onSubmit","valid","passwordMatch","newUser","setName","get","value","setEmail","setPassword","setStatus","ENABLE","createUser","subscribe","createdUser","console","log","navigate","error","goToLogin","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\cruza\\Ecommerce Front\\src\\components\\register-login\\register\\register.component.ts","C:\\Users\\cruza\\Ecommerce Front\\src\\components\\register-login\\register\\register.component.html"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { UserService } from 'src/app/adapters/user.repository.adapter';\r\nimport { User } from 'src/app/model/user';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n})\r\nexport class RegisterComponent {\r\n  registerForm: FormGroup;\r\n\r\n  constructor(\r\n    private fb: FormBuilder, \r\n    private router: Router,\r\n    private userService: UserService\r\n  ) {\r\n    this.registerForm = this.fb.group({\r\n      name: ['', Validators.required],\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: ['', [Validators.required, Validators.minLength(6)]],\r\n      confirmPassword: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.registerForm.valid && this.passwordMatch()) {\r\n      const newUser: User = new User();\r\n      newUser.setName = this.registerForm.get('name')?.value;\r\n      newUser.setEmail = this.registerForm.get('email')?.value;\r\n      newUser.setPassword = this.registerForm.get('password')?.value;\r\n      newUser.setStatus = User.ENABLE;\r\n\r\n      this.userService.createUser(newUser).subscribe(\r\n        (createdUser) => {\r\n          console.log('Usuario creado:', createdUser);\r\n          this.router.navigate(['/']);\r\n        },\r\n        (error) => {\r\n          console.error('Error al crear usuario:', error);\r\n        }\r\n      );\r\n    } else {\r\n      console.log('Formulario inválido o contraseñas no coinciden');\r\n    }\r\n  }\r\n\r\n  passwordMatch(): boolean {\r\n    const password = this.registerForm.get('password')?.value;\r\n    const confirmPassword = this.registerForm.get('confirmPassword')?.value;\r\n    return password === confirmPassword;\r\n  }\r\n\r\n  goToLogin() {\r\n    this.router.navigate(['/login']);\r\n  }\r\n}","<div class=\"container mt-5\">\r\n    <div class=\"row justify-content-center\">\r\n      <div class=\"col-md-6\">\r\n        <div class=\"card\">\r\n          <div class=\"card-body\">\r\n            <h2 class=\"text-center mb-4\">Crear cuenta</h2>\r\n            <form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\">\r\n              <div class=\"mb-3\">\r\n                <label for=\"name\" class=\"form-label\">Nombre</label>\r\n                <input type=\"text\" id=\"name\" class=\"form-control\" formControlName=\"name\" placeholder=\"Nombre y apellido\">\r\n                <div *ngIf=\"registerForm.get('name')?.invalid && registerForm.get('name')?.touched\" class=\"text-danger\">\r\n                  ¡Ingresa tu nombre!\r\n                </div>\r\n              </div>\r\n              \r\n              <div class=\"mb-3\">\r\n                <label for=\"email\" class=\"form-label\">Correo electrónico</label>\r\n                <input type=\"email\" id=\"email\" class=\"form-control\" formControlName=\"email\" placeholder=\"Escribe tu correo electrónico o tu número móvil\">\r\n                <div *ngIf=\"registerForm.get('email')?.invalid && registerForm.get('email')?.touched\" class=\"text-danger\">\r\n                  ¡Ingresa un correo electrónico válido!\r\n                </div>\r\n              </div>\r\n              \r\n              <div class=\"mb-3\">\r\n                <label for=\"password\" class=\"form-label\">Contraseña</label>\r\n                <input type=\"password\" id=\"password\" class=\"form-control\" formControlName=\"password\" placeholder=\"Debe tener al menos 6 caracteres\">\r\n                <div *ngIf=\"registerForm.get('password')?.invalid && registerForm.get('password')?.touched\" class=\"text-danger\">\r\n                  ¡Ingresa una contraseña válida!\r\n                </div>\r\n              </div>\r\n              \r\n              <div class=\"mb-3\">\r\n                <label for=\"confirmPassword\" class=\"form-label\">Vuelve a escribir la contraseña</label>\r\n                <input type=\"password\" id=\"confirmPassword\" class=\"form-control\" formControlName=\"confirmPassword\" placeholder=\"Vuelve a escribir tu contraseña\">\r\n                <div *ngIf=\"!passwordMatch() && registerForm.get('confirmPassword')?.touched\" class=\"text-danger\">\r\n                  Las contraseñas no coinciden.\r\n                </div>\r\n              </div>\r\n              \r\n              <button type=\"submit\" class=\"btn btn-warning w-100\">Continuar</button>\r\n            </form>\r\n  \r\n            <div class=\"text-center mt-3\">\r\n              <p>¿Ya tienes una cuenta? <a href=\"/login\" (click)=\"goToLogin()\">Iniciar sesión</a></p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}