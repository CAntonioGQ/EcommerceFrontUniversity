{"ast":null,"code":"import { BehaviorSubject, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3030/api/users';\n    this.currentUserSubject = new BehaviorSubject(this.getUserFromLocalStorage());\n    this.currentUser$ = this.currentUserSubject.asObservable();\n  }\n  getUserFromLocalStorage() {\n    const user = localStorage.getItem('currentUser');\n    return user ? JSON.parse(user) : null;\n  }\n  saveUserToLocalStorage(user) {\n    localStorage.setItem('currentUser', JSON.stringify(user));\n  }\n  getUsers() {\n    return this.http.get(this.apiUrl);\n  }\n  getUser(id) {\n    return this.http.get(`${this.apiUrl}/${id}`);\n  }\n  createUser(user) {\n    return this.http.post(this.apiUrl, user);\n  }\n  updateUser(id, user) {\n    return this.http.put(`${this.apiUrl}/${id}`, user);\n  }\n  login(email, password) {\n    return this.http.post(`${this.apiUrl}/login`, {\n      email,\n      password\n    }).pipe(tap(user => {\n      this.saveUserToLocalStorage(user); // Guarda el usuario en localStorage\n      this.currentUserSubject.next(user);\n    }));\n  }\n  logout() {\n    localStorage.removeItem('currentUser'); // Elimina el usuario de localStorage\n    this.currentUserSubject.next(null);\n  }\n  static #_ = this.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAEA,SAAqBA,eAAe,EAAEC,GAAG,QAAQ,MAAM;;;AAMvD,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAJhB,WAAM,GAAG,iCAAiC;IAC1C,uBAAkB,GAAG,IAAIJ,eAAe,CAAc,IAAI,CAACK,uBAAuB,EAAE,CAAC;IAC7F,iBAAY,GAAG,IAAI,CAACC,kBAAkB,CAACC,YAAY,EAAE;EAEd;EAEvCF,uBAAuB;IACrB,MAAMG,IAAI,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IAChD,OAAOF,IAAI,GAAGG,IAAI,CAACC,KAAK,CAACJ,IAAI,CAAC,GAAG,IAAI;EACvC;EAEAK,sBAAsB,CAACL,IAAU;IAC/BC,YAAY,CAACK,OAAO,CAAC,aAAa,EAAEH,IAAI,CAACI,SAAS,CAACP,IAAI,CAAC,CAAC;EAC3D;EAEAQ,QAAQ;IACN,OAAO,IAAI,CAACZ,IAAI,CAACa,GAAG,CAAS,IAAI,CAACC,MAAM,CAAC;EAC3C;EAEAC,OAAO,CAACC,EAAU;IAChB,OAAO,IAAI,CAAChB,IAAI,CAACa,GAAG,CAAO,GAAG,IAAI,CAACC,MAAM,IAAIE,EAAE,EAAE,CAAC;EACpD;EAEAC,UAAU,CAACb,IAAU;IACnB,OAAO,IAAI,CAACJ,IAAI,CAACkB,IAAI,CAAO,IAAI,CAACJ,MAAM,EAAEV,IAAI,CAAC;EAChD;EAEAe,UAAU,CAACH,EAAU,EAAEZ,IAAmB;IACxC,OAAO,IAAI,CAACJ,IAAI,CAACoB,GAAG,CAAO,GAAG,IAAI,CAACN,MAAM,IAAIE,EAAE,EAAE,EAAEZ,IAAI,CAAC;EAC1D;EAEAiB,KAAK,CAACC,KAAa,EAAEC,QAAgB;IACnC,OAAO,IAAI,CAACvB,IAAI,CAACkB,IAAI,CAAO,GAAG,IAAI,CAACJ,MAAM,QAAQ,EAAE;MAAEQ,KAAK;MAAEC;IAAQ,CAAE,CAAC,CAACC,IAAI,CAC3E3B,GAAG,CAACO,IAAI,IAAG;MACT,IAAI,CAACK,sBAAsB,CAACL,IAAI,CAAC,CAAC,CAAC;MACnC,IAAI,CAACF,kBAAkB,CAACuB,IAAI,CAACrB,IAAI,CAAC;IACpC,CAAC,CAAC,CACH;EACH;EAEAsB,MAAM;IACJrB,YAAY,CAACsB,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC;IACxC,IAAI,CAACzB,kBAAkB,CAACuB,IAAI,CAAC,IAAI,CAAC;EACpC;EAAC;qBA5CU3B,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAA8B,SAAX9B,WAAW;IAAA+B,YAFV;EAAM","names":["BehaviorSubject","tap","UserService","constructor","http","getUserFromLocalStorage","currentUserSubject","asObservable","user","localStorage","getItem","JSON","parse","saveUserToLocalStorage","setItem","stringify","getUsers","get","apiUrl","getUser","id","createUser","post","updateUser","put","login","email","password","pipe","next","logout","removeItem","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\cruza\\Ecommerce Front\\src\\app\\adapters\\user.repository.adapter.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject, tap } from 'rxjs';\r\nimport { User } from '../model/user';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService {\r\n  private apiUrl = 'http://localhost:3030/api/users';\r\n  private currentUserSubject = new BehaviorSubject<User | null>(this.getUserFromLocalStorage());\r\n  currentUser$ = this.currentUserSubject.asObservable();\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getUserFromLocalStorage(): User | null {\r\n    const user = localStorage.getItem('currentUser');\r\n    return user ? JSON.parse(user) : null;\r\n  }\r\n\r\n  saveUserToLocalStorage(user: User): void {\r\n    localStorage.setItem('currentUser', JSON.stringify(user));\r\n  }\r\n\r\n  getUsers(): Observable<User[]> {\r\n    return this.http.get<User[]>(this.apiUrl);\r\n  }\r\n\r\n  getUser(id: number): Observable<User> {\r\n    return this.http.get<User>(`${this.apiUrl}/${id}`);\r\n  }\r\n\r\n  createUser(user: User): Observable<User> {\r\n    return this.http.post<User>(this.apiUrl, user);\r\n  }\r\n\r\n  updateUser(id: number, user: Partial<User>): Observable<User> {\r\n    return this.http.put<User>(`${this.apiUrl}/${id}`, user);\r\n  }\r\n\r\n  login(email: string, password: string): Observable<any> {\r\n    return this.http.post<User>(`${this.apiUrl}/login`, { email, password }).pipe(\r\n      tap(user => {\r\n        this.saveUserToLocalStorage(user); // Guarda el usuario en localStorage\r\n        this.currentUserSubject.next(user);\r\n      })\r\n    );\r\n  }\r\n\r\n  logout() {\r\n    localStorage.removeItem('currentUser'); // Elimina el usuario de localStorage\r\n    this.currentUserSubject.next(null);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}