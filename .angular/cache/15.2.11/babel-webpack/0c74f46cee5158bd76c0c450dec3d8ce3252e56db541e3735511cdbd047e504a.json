{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { User } from 'src/app/model/user';\nimport { Card } from 'src/app/model/card';\nimport * as i0 from \"@angular/core\";\nexport class AuthService {\n  constructor() {\n    this.isLoggedInSubject = new BehaviorSubject(this.checkInitialLoginState());\n    this.isLoggedIn$ = this.isLoggedInSubject.asObservable();\n    this.currentUserSubject = new BehaviorSubject(this.getCurrentUser());\n    this.currentUser$ = this.currentUserSubject.asObservable();\n    this.currentCardSubject = new BehaviorSubject(this.getCurrentCard());\n    this.currentCard$ = this.currentCardSubject.asObservable();\n    console.log('AuthService inicializado. Estado inicial de sesión:', this.isLoggedInSubject.value);\n  }\n  checkInitialLoginState() {\n    const userData = localStorage.getItem('user');\n    const isLoggedIn = !!userData;\n    console.log('Estado inicial de sesión:', isLoggedIn);\n    return isLoggedIn;\n  }\n  getCurrentUser() {\n    const userData = localStorage.getItem('user');\n    if (userData) {\n      const parsedUser = JSON.parse(userData);\n      const user = new User();\n      user.setIdUser = parsedUser.idUser;\n      user.setName = parsedUser.name;\n      user.setEmail = parsedUser.email;\n      user.setStatus = parsedUser.status;\n      return user;\n    }\n    return null;\n  }\n  getCurrentCard() {\n    const cardData = localStorage.getItem('card');\n    if (cardData) {\n      const parsedCard = JSON.parse(cardData);\n      const card = new Card();\n      card.setIdCard = parsedCard.idCard;\n      card.setDigits = parsedCard.digits;\n      card.setFunds = parsedCard.funds;\n      card.setStatus = parsedCard.status;\n      return card;\n    }\n    return null;\n  }\n  isLoggedIn() {\n    return this.isLoggedInSubject.value;\n  }\n  login(userData, cardData) {\n    localStorage.setItem('user', JSON.stringify(userData));\n    localStorage.setItem('card', JSON.stringify(cardData));\n    this.isLoggedInSubject.next(true);\n    this.currentUserSubject.next(userData);\n    this.currentCardSubject.next(cardData);\n    console.log('Usuario ha iniciado sesión');\n  }\n  logout() {\n    localStorage.removeItem('user');\n    localStorage.removeItem('card');\n    this.isLoggedInSubject.next(false);\n    this.currentUserSubject.next(null);\n    this.currentCardSubject.next(null);\n    console.log('Usuario ha cerrado sesión');\n  }\n  getUserId() {\n    const currentUser = this.currentUserSubject.value;\n    return currentUser ? currentUser.getIdUser : undefined;\n  }\n  getUserFunds() {\n    const currentCard = this.currentCardSubject.value;\n    return currentCard ? currentCard.getFunds : undefined;\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"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","names":["BehaviorSubject","User","Card","AuthService","constructor","checkInitialLoginState","isLoggedInSubject","asObservable","getCurrentUser","currentUserSubject","getCurrentCard","currentCardSubject","console","log","value","userData","localStorage","getItem","isLoggedIn","parsedUser","JSON","parse","user","setIdUser","idUser","setName","name","setEmail","email","setStatus","status","cardData","parsedCard","card","setIdCard","idCard","setDigits","digits","setFunds","funds","login","setItem","stringify","next","logout","removeItem","getUserId","currentUser","getIdUser","undefined","getUserFunds","currentCard","getFunds","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\cruza\\Ecommerce Front\\src\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { User } from 'src/app/model/user';\r\nimport { Card } from 'src/app/model/card';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private isLoggedInSubject = new BehaviorSubject<boolean>(this.checkInitialLoginState());\r\n  isLoggedIn$: Observable<boolean> = this.isLoggedInSubject.asObservable();\r\n\r\n  private currentUserSubject = new BehaviorSubject<User | null>(this.getCurrentUser());\r\n  currentUser$: Observable<User | null> = this.currentUserSubject.asObservable();\r\n\r\n  private currentCardSubject = new BehaviorSubject<Card | null>(this.getCurrentCard());\r\n  currentCard$: Observable<Card | null> = this.currentCardSubject.asObservable();\r\n\r\n  constructor() {\r\n    console.log('AuthService inicializado. Estado inicial de sesión:', this.isLoggedInSubject.value);\r\n  }\r\n\r\n  private checkInitialLoginState(): boolean {\r\n    const userData = localStorage.getItem('user');\r\n    const isLoggedIn = !!userData;\r\n    console.log('Estado inicial de sesión:', isLoggedIn);\r\n    return isLoggedIn;\r\n  }\r\n\r\n  private getCurrentUser(): User | null {\r\n    const userData = localStorage.getItem('user');\r\n    if (userData) {\r\n      const parsedUser = JSON.parse(userData);\r\n      const user = new User();\r\n      user.setIdUser = parsedUser.idUser;\r\n      user.setName = parsedUser.name;\r\n      user.setEmail = parsedUser.email;\r\n      user.setStatus = parsedUser.status;\r\n      return user;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private getCurrentCard(): Card | null {\r\n    const cardData = localStorage.getItem('card');\r\n    if (cardData) {\r\n      const parsedCard = JSON.parse(cardData);\r\n      const card = new Card();\r\n      card.setIdCard = parsedCard.idCard;\r\n      card.setDigits = parsedCard.digits;\r\n      card.setFunds = parsedCard.funds;\r\n      card.setStatus = parsedCard.status;\r\n      return card;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  isLoggedIn(): boolean {\r\n    return this.isLoggedInSubject.value;\r\n  }\r\n\r\n  login(userData: User, cardData: Card) {\r\n    localStorage.setItem('user', JSON.stringify(userData));\r\n    localStorage.setItem('card', JSON.stringify(cardData));\r\n    this.isLoggedInSubject.next(true);\r\n    this.currentUserSubject.next(userData);\r\n    this.currentCardSubject.next(cardData);\r\n    console.log('Usuario ha iniciado sesión');\r\n  }\r\n\r\n  logout() {\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('card');\r\n    this.isLoggedInSubject.next(false);\r\n    this.currentUserSubject.next(null);\r\n    this.currentCardSubject.next(null);\r\n    console.log('Usuario ha cerrado sesión');\r\n  }\r\n\r\n  getUserId(): number | undefined {\r\n    const currentUser = this.currentUserSubject.value;\r\n    return currentUser ? currentUser.getIdUser : undefined;\r\n  }\r\n\r\n  getUserFunds(): number | undefined {\r\n    const currentCard = this.currentCardSubject.value;\r\n    return currentCard ? currentCard.getFunds : undefined;\r\n  }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}