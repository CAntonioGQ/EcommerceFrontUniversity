{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class AuthService {\n  constructor() {\n    this.isLoggedInSubject = new BehaviorSubject(this.checkInitialLoginState());\n    this.isLoggedIn$ = this.isLoggedInSubject.asObservable();\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.currentUser$ = this.currentUserSubject.asObservable();\n    this.currentCardSubject = new BehaviorSubject(null);\n    this.currentCard$ = this.currentCardSubject.asObservable();\n    console.log('AuthService inicializado. Estado inicial de sesión:', this.isLoggedInSubject.value);\n  }\n  checkInitialLoginState() {\n    const userData = localStorage.getItem('user');\n    return !!userData;\n  }\n  login(user, card) {\n    localStorage.setItem('user', JSON.stringify(user));\n    localStorage.setItem('card', JSON.stringify(card));\n    this.isLoggedInSubject.next(true);\n    this.currentUserSubject.next(user);\n    this.currentCardSubject.next(card);\n    console.log('Usuario ha iniciado sesión');\n  }\n  logout() {\n    localStorage.removeItem('user');\n    localStorage.removeItem('card');\n    this.isLoggedInSubject.next(false);\n    this.currentUserSubject.next(null);\n    this.currentCardSubject.next(null);\n    console.log('Usuario ha cerrado sesión');\n  }\n  getUserId() {\n    return this.currentUserSubject.value?.getIdUser;\n  }\n  getUserFunds() {\n    return this.currentCardSubject.value?.getFunds;\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,eAAe,QAAoB,MAAM;;AAOlD,OAAM,MAAOC,WAAW;EAUtBC;IATQ,sBAAiB,GAAG,IAAIF,eAAe,CAAU,IAAI,CAACG,sBAAsB,EAAE,CAAC;IACvF,gBAAW,GAAwB,IAAI,CAACC,iBAAiB,CAACC,YAAY,EAAE;IAEhE,uBAAkB,GAAG,IAAIL,eAAe,CAAc,IAAI,CAAC;IACnE,iBAAY,GAA4B,IAAI,CAACM,kBAAkB,CAACD,YAAY,EAAE;IAEtE,uBAAkB,GAAG,IAAIL,eAAe,CAAc,IAAI,CAAC;IACnE,iBAAY,GAA4B,IAAI,CAACO,kBAAkB,CAACF,YAAY,EAAE;IAG5EG,OAAO,CAACC,GAAG,CAAC,qDAAqD,EAAE,IAAI,CAACL,iBAAiB,CAACM,KAAK,CAAC;EAClG;EAEQP,sBAAsB;IAC5B,MAAMQ,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC7C,OAAO,CAAC,CAACF,QAAQ;EACnB;EAEAG,KAAK,CAACC,IAAU,EAAEC,IAAU;IAC1BJ,YAAY,CAACK,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC,CAAC;IAClDH,YAAY,CAACK,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACH,IAAI,CAAC,CAAC;IAClD,IAAI,CAACZ,iBAAiB,CAACgB,IAAI,CAAC,IAAI,CAAC;IACjC,IAAI,CAACd,kBAAkB,CAACc,IAAI,CAACL,IAAI,CAAC;IAClC,IAAI,CAACR,kBAAkB,CAACa,IAAI,CAACJ,IAAI,CAAC;IAClCR,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;EAC3C;EAEAY,MAAM;IACJT,YAAY,CAACU,UAAU,CAAC,MAAM,CAAC;IAC/BV,YAAY,CAACU,UAAU,CAAC,MAAM,CAAC;IAC/B,IAAI,CAAClB,iBAAiB,CAACgB,IAAI,CAAC,KAAK,CAAC;IAClC,IAAI,CAACd,kBAAkB,CAACc,IAAI,CAAC,IAAI,CAAC;IAClC,IAAI,CAACb,kBAAkB,CAACa,IAAI,CAAC,IAAI,CAAC;IAClCZ,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;EAC1C;EAEAc,SAAS;IACP,OAAO,IAAI,CAACjB,kBAAkB,CAACI,KAAK,EAAEc,SAAS;EACjD;EAEAC,YAAY;IACV,OAAO,IAAI,CAAClB,kBAAkB,CAACG,KAAK,EAAEgB,QAAQ;EAChD;EAAC;qBA3CUzB,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAA0B,SAAX1B,WAAW;IAAA2B,YAFV;EAAM","names":["BehaviorSubject","AuthService","constructor","checkInitialLoginState","isLoggedInSubject","asObservable","currentUserSubject","currentCardSubject","console","log","value","userData","localStorage","getItem","login","user","card","setItem","JSON","stringify","next","logout","removeItem","getUserId","getIdUser","getUserFunds","getFunds","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\cruza\\Ecommerce Front\\src\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { User } from 'src/app/model/user';\r\nimport { Card } from 'src/app/model/card';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private isLoggedInSubject = new BehaviorSubject<boolean>(this.checkInitialLoginState());\r\n  isLoggedIn$: Observable<boolean> = this.isLoggedInSubject.asObservable();\r\n\r\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\r\n  currentUser$: Observable<User | null> = this.currentUserSubject.asObservable();\r\n\r\n  private currentCardSubject = new BehaviorSubject<Card | null>(null);\r\n  currentCard$: Observable<Card | null> = this.currentCardSubject.asObservable();\r\n\r\n  constructor() {\r\n    console.log('AuthService inicializado. Estado inicial de sesión:', this.isLoggedInSubject.value);\r\n  }\r\n\r\n  private checkInitialLoginState(): boolean {\r\n    const userData = localStorage.getItem('user');\r\n    return !!userData;\r\n  }\r\n\r\n  login(user: User, card: Card) {\r\n    localStorage.setItem('user', JSON.stringify(user));\r\n    localStorage.setItem('card', JSON.stringify(card));\r\n    this.isLoggedInSubject.next(true);\r\n    this.currentUserSubject.next(user);\r\n    this.currentCardSubject.next(card);\r\n    console.log('Usuario ha iniciado sesión');\r\n  }\r\n\r\n  logout() {\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('card');\r\n    this.isLoggedInSubject.next(false);\r\n    this.currentUserSubject.next(null);\r\n    this.currentCardSubject.next(null);\r\n    console.log('Usuario ha cerrado sesión');\r\n  }\r\n\r\n  getUserId(): number | undefined {\r\n    return this.currentUserSubject.value?.getIdUser;\r\n  }\r\n\r\n  getUserFunds(): number | undefined {\r\n    return this.currentCardSubject.value?.getFunds;\r\n  }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}